# -*- coding: utf-8 -*-
"""PRODUTIVIDADE_CD

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uS0Rz6mDm0qVpEsLRMMkxJXX1pPEDd-K

#**Análise Descritiva**
##**Dados da Produtividade das Linha de Separação**
##**Centro de Distrbuição de Produtos de Cabelos e Pele**

# <font color='blue'>**ANÁLISE DESCRITIVA**</font>

**01-Objetivo:**

#**02-Instalando e carregando os pacotes**
"""

from google.colab import drive
drive.mount('/content/drive')

# Imports
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

"""#**03-Carregando e compreendendo os dados do dataframe**"""

dfprod = pd.read_csv("/content/drive/MyDrive/\
02-PROJETOS/06_ANALISE_PRODUTIVIDADE_CD/PRODUTIVIDADE_CD23.csv",encoding =\
                     "ISO-8859-1")
# 01-código para carregar o dataset de produtividade das linhas de separação

dfprod.shape
# 02-código para mostrar a quantidade de linhas e colunas do dataframe.
# Temos 21.840 linhas e 07 colunas.

dfprod.isna().sum()
# 03-código para contar o número de valores nulos (NaN) em cada coluna,
# Não temos nenhum valor nulo.

dfprod.head()
# 04-código para verificar as primeiras 05 linhas do dataframe.

dfprod.tail()
# 05-código para verificar as 05 últimas linhas do dataframe.

dfprod.info()
# 06-código para fornecer informações concisas sobre um dataFrame.

dfprod.select_dtypes(include='int64')
# 06-Código para selecionar as colunas do dataFrame com dados int64 (inteiros).
# Temos no dataframe 21.840 linhas e 1 coluna com tipo de dados int64 (inteiros.

dfprod.select_dtypes(include='object')
# 07- Código para selecionar as colunas do DataFrame com dados object (texto).
# Temos no dataframe 21,840 linhas e 06 colunas com dados object (texto).

dfprod.describe()
# 08- código para gerar as estatísticas descritivas para as colunas numéricas.
# Temos count = quantidade de linhas,
# mean = Média da separação de peças/h.
# min = Indica o valor minimo que foi alcabçado na separação de peças/h.
# std =  Desvio padrão separação de peças/h
# 1ª quartil =  25 %  da separação de peças/h estão abaixo desse valor.
# 2ª Quartil = Mediana = 50%  da separação de peças/h estão abaixo desse valor.
# 3ª Quartil = 75% da separação de peças/h estã abaixo dessa valor.
# máx = Indica o valor máximo que foi alcabçado na separação de peças/h.

dfprod.duplicated().sum()
# 10- Código retornar o número total de linhas duplicadas no dataFrame.
# Não temos no dataframe nenhuma linha duplicada

"""#**04-Respondendo as perguntas de negócios**

##**4.1-Qual é a distribuição da separação de peças por hora no centro de distribuição?**

####**A- Cálculo do Histograma**
"""

# A- Cálculo do Histograma
dfprod["produtividade"].hist(bins=30, edgecolor='black')
plt.title('Histograma de Seoaração de peças/h Linhas de Separação')
plt.xlabel('Produtividade')
plt.ylabel('Frequência')
plt.show()

import plotly.express as px
fig = px.box(dfprod, y="produtividade")
fig.show()

# B- Cálculo do Bloxplot
sns.boxplot(dfprod["produtividade"])

# C- Cálculo od coeficiente de variação
# Coeficiente de variação: Medida relativa de variabilidade em relação à média.

dfprod["produtividade"].std()/dfprod["produtividade"].mean()

# Calcular a assimetria, ou "skew"
# Entender a forma da distribuição de um conjunto de dados (produtividade)
# Descreve a inclinação ou distorção de uma distribuição em relação à sua média.
# Skewness = 0: Indica que a distribuição é perfeitamente simétrica.
# Skewness > 0: Indica assimetria à direita (a cauda direita é mais longa).
# Skewness < 0: Indica assimetria à esquerda (a cauda esquerda é mais longa).

dfprod["produtividade"].skew()

df_media_turno = dfprod.groupby(["turno_sep"])["produtividade"].mean().reset_index()
dfturnos = df_media_turno.rename(columns={'produtividade': 'Media_produtividade_turno'})
# Criar uma lista de cores para cada linha_sep
cores = ['steelblue', 'green']  # Adicione mais cores conforme necessário
# Criar o gráfico de barras
# Criar o gráfico de barras
fig, ax = plt.subplots()
bars = ax.bar(dfturnos["turno_sep"], dfturnos['Media_produtividade_turno'], color=cores)
# Adicionar uma linha horizontal para a média de 1500 peças
ax.axhline(y=1500, color='black', linestyle='-', label='Média de 1500 peças')
# Adicionar rótulos
ax.set_xlabel('Turnos')
ax.set_ylabel('Separação unid/h')
ax.set_title('Média de Separação de peças/h - Turnos')
# Adicionar os valores no centro de cada barra
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2),\
             ha='center', va='bottom', color='black')
# Exibir o gráfico
plt.show()

# Código para agrupar e renomear colunas
dfhora_sep = dfprod.groupby(["hora_sep"])["produtividade"].mean().reset_index()
dfhora_sep1 = dfhora_sep.rename(columns={'produtividade': 'Media_produtividade_hora'})

# Criar o gráfico de barras
plt.figure(figsize=(18, 10))
plt.bar(dfhora_sep1["hora_sep"], dfhora_sep1["Media_produtividade_hora"], color='steelblue')

# Adicionar uma linha horizontal para a média de 1500 peças
plt.axhline(y=1500, color='black', linestyle='-', label='Média de 1500 peças')

# Adicionar rótulos e título com tamanho de letra aumentado
plt.xlabel('Hora de Separação', fontsize=10)
plt.ylabel('Separação peças/h', fontsize=12)
plt.title('Média de Separação peças a cada hora do dia', fontsize=20)

# Ajustar tamanho da fonte das marcações no eixo x
plt.xticks(fontsize= 12)

# Adicionar legenda
plt.legend()

# Exibir o gráfico
plt.show()

dfmes = dfprod.groupby(["mes"])["produtividade"].mean().reset_index()
dfmeses = dfmes.rename(columns={'produtividade': 'Media_produtividade_mes'})
print(dfmeses)

dfcategorias = dfprod.groupby(["categoria"])["produtividade"].mean().reset_index()
dfcategorias02 = dfcategorias.rename(columns={'produtividade': 'Media_produtividade_categoria'})
print(dfcategorias02)

# Calcular as médias por linha e renomear a coluna
dfmedia_linhas = dfprod.groupby(["linha_sep"])["produtividade"].mean().reset_index()
dfmedia_linhas02 = dfmedia_linhas.rename(columns={'produtividade': 'Media_produtividade'})
# Criar uma lista de cores para cada linha_sep
cores = ['steelblue', 'green', 'orange', 'red', 'purple']  # Adicione mais cores conforme necessário
# Criar o gráfico de barras
fig, ax = plt.subplots()
bars = ax.bar(dfmedia_linhas02['linha_sep'], dfmedia_linhas02['Media_produtividade'], color=cores)
# Adicionar uma linha horizontal para a média de 1500 peças
ax.axhline(y=1500, color='black', linestyle='-', label='Média de 1500 peças')
# Adicionar rótulos
ax.set_xlabel('Linhas de Separação')
ax.set_ylabel('separação unid/h')
ax.set_title('Média de Separação unid/h Linhas')
# Adicionar os valores no centro de cada barra
for bar in bars:
    yval = bar.get_height()
    ax.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2),\
            ha= 'center', va='bottom', color='black')
# Exibir o gráfico
plt.show()